#include <stdexcept>
#include<vector>
#include<stdio.h>
#include<stdlib.h>
#include"pack109.hpp"

template <class T>
int test(const char* label, T lhs, T rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs=%x\n", lhs);
    printf("  rhs=%x\n", rhs);
    exit(1);
  }
}

int testPerson(const char* label, struct Person lhs, struct Person rhs) {
  printf("%s: ", label);
  if (lhs.age==rhs.age && lhs.height==rhs.height && lhs.name==rhs.name) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs=%x\n", lhs);
    printf("  rhs=%x\n", rhs);
    exit(1);
  }
}

int testvec(const char* label, vec lhs, vec rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs="); pack109::printVec(lhs); printf("\n");
    printf("  rhs="); pack109::printVec(rhs); printf("\n");
    exit(1);
  }
}


int main() {

  // Test bool

  // True
  vec v1{0xa0};
  vec bytes1 = pack109::serialize(true);
  testvec("Test 1 - true ser", bytes1, v1);

  bool bool_true = pack109::deserialize_bool(bytes1);
  test("Test 2 - true de", bool_true, true);
 

  // False
  vec v2{0xa1};
  vec bytes2 = pack109::serialize(false);
  testvec("Test 3 - false ser", bytes2, v2);

  bool bool_false = pack109::deserialize_bool(bytes2); 
  test("Test 4 - false de", bool_false, false);

  // Test Integers

  // u8
  u8 item1 = 0x42;
  vec v3{0xa2, 0x42};
  vec bytes3 = pack109::serialize(item1);
  testvec("Test 5 - u8 ser", bytes3, v3);
  
  u8 int_u8 = pack109::deserialize_u8(bytes3);  
  test("Test 6 - u8 de", int_u8, item1);

  // u32
  u32 item2 = 0x12345678;
  vec v4{0xa3, 0x12, 0x34, 0x56, 0x78};
  vec bytes4 = pack109::serialize(item2);
  testvec("Test 7 - u32 ser", bytes4, v4);

  u32 int_u32 = pack109::deserialize_u32(bytes4);
  test("Test 8 - u32 de", int_u32, item2);

  // u64
  u64 item3 = 0x123456789ABCDEFF;
  vec v5{0xa4, 0x12, 0x34, 0x56, 0x78, 0x9A, 0xBC, 0xDE, 0xFF};
  vec bytes5 = pack109::serialize(item3);
  testvec("Test 9 - u64 ser", bytes5, v5);

  u64 int_u64 = pack109::deserialize_u64(bytes5);
  test("Test 10 - u64 de", int_u64, item3);

  // i8
  i8 item4 = 0x98;
  vec v6{0xa5, 0x98};
  vec bytes6 = pack109::serialize(item4);
  testvec("Test 11 - i8 ser", bytes6, v6);

  i8 int_i8 = pack109::deserialize_i8(bytes6);  
  test("Test 12 - i8 de", int_i8, item4);

  // i32
  i32 item5 = 0x87654321;
  vec v7{0xa6, 0x87, 0x65, 0x43, 0x21};
  vec bytes7 = pack109::serialize(item5);
  testvec("Test 13 - i32 ser", bytes7, v7);

  i32 int_i32 = pack109::deserialize_i32(bytes7);
  test("Test 14 - i32 de", int_i32, item5);

  // i64
  i64 item6 = 0xFFEDCBA987654321;
  vec v8{0xa7, 0xFF, 0xED, 0xCB, 0xA9, 0x87, 0x65, 0x43, 0x21};
  vec bytes8 = pack109::serialize(item6);
  testvec("Test 15 - i64 ser", bytes8, v8);

  i64 int_i64 = pack109::deserialize_i64(bytes8);
  test("Test 16 - i64 de", int_i64, item6);

  // Test Float

  // f32
  f32 item7 = 1.5678; //0x3fc8adac in hex
  vec v9{0xa8, 0x3F, 0xC8, 0xAD, 0xAC};
  vec bytes9 = pack109::serialize(item7);
  testvec("Test 17 - f32 ser", bytes9, v9);

  f32 float_f32 = pack109::deserialize_f32(bytes9);
  test("Test 18 - f32 de", float_f32, item7);

  // f64
  f64 item8 = 5.6792452; //0x4016b78c0dbfdc24 in hex
  vec v10{0xa9, 0x40, 0x16, 0xB7, 0x8C, 0x0D, 0xBF, 0xDC, 0x24};
  vec bytes10 = pack109::serialize(item8);
  testvec("Test 19 - f64 ser", bytes10, v10);

  f64 float_f64 = pack109::deserialize_f64(bytes10);
  test("Test 20 - f64 de", float_f64, item8);

  // Test Strings

  // s8
  string item9 = "test";
  vec v11{0xaa, 0x04, 0x74, 0x65, 0x73, 0x74};
  vec bytes11 = pack109::serialize(item9);
  testvec("Test 21 - s8 ser", bytes11, v11);

  string str_s8 = pack109::deserialize_string(bytes11);
  test("Test 22 - s8 de", str_s8, item9);

  // s16
  string item10 = "test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------test      ------";
  //length is 256 characters (bytes): 0x100
  vec v12{0xab, 0x01, 0x00, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
          0x74, 0x65, 0x73, 0x74, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 
  };
  vec bytes12 = pack109::serialize(item10);
  testvec("Extra test - s16 ser", bytes12, v12);

  string str_s16 = pack109::deserialize_string(bytes12);
  test("Extra test - s16 de", str_s16, item10);

  // Test Arrays

  // a8 u8
  std::vector<u8> item11 = {0x12, 0x34, 0x45, 0x67, 0x89, 0xAB};
  vec v13{0xac, 0x06, 0xa2, 0x12, 0xa2, 0x34, 0xa2, 0x45, 0xa2, 0x67, 0xa2, 0x89, 0xa2, 0xAB};  //u8 tag before each
  vec bytes13 = pack109::serialize(item11);
  testvec("Test 23 - a8 u8 ser", bytes13, v13);

  std::vector<u8> arr_u8 = pack109::deserialize_vec_u8(bytes13);
  test("Test 24 - a8 u8 de", arr_u8, item11);

  std::vector<u64> item12 = {(u64)0x1111111122222222, (u64)0x3333333344444444, (u64)0x5555555566666666};
  vec v14{0xac, 0x03, 0xa4, 0x11, 0x11, 0x11, 0x11, 0x22, 0x22, 0x22, 0x22, 0xa4, 0x33, 0x33, 0x33, 0x33, 0x44, 0x44, 0x44, 0x44, 0xa4, 0x55, 0x55, 0x55, 0x55, 0x66, 0x66, 0x66, 0x66};  //u64 tag before each
  vec bytes14 = pack109::serialize(item12);
  testvec("Test 25 - a8 u64 ser", bytes14, v14);

  std::vector<u64> arr_u64 = pack109::deserialize_vec_u64(bytes14);
  test("Test 26 - a8 u64 de", arr_u64, item12);

  std::vector<f64> item13 = {3.456, 14.623, 0.573};  //0x400ba5e353f7ced9, 0x402d3ef9db22d0e5, 0x3fe25604189374bc
  vec v15{0xac, 0x03, 0xa9, 0x40, 0x0B, 0xA5, 0xE3, 0x53, 0xF7, 0xCE, 0xD9, 0xa9, 0x40, 0x2D, 0x3E, 0xF9, 0xDB, 0x22, 0xD0, 0xE5, 0xa9, 0x3F, 0xE2, 0x56, 0x04, 0x18, 0x93, 0x74, 0xBC};  //f64 tag before each
  vec bytes15 = pack109::serialize(item13);
  testvec("Test 27 - a8 f64 ser", bytes15, v15);

  std::vector<f64> arr_f64 = pack109::deserialize_vec_f64(bytes15);
  test("Test 28 - a8 f64 de", arr_f64, item13);

  std::vector<string> item14 = {"fun", "yay", "runs"};
  vec v16{0xac, 0x03, 0xaa, 0x03, 0x66, 0x75, 0x6E, 0xaa, 0x03, 0x79, 0x61, 0x79, 0xaa, 0x04, 0x72, 0x75, 0x6E, 0x73};  //string tag and length before each
  vec bytes16 = pack109::serialize(item14);
  testvec("Test 29 - a8 string ser", bytes16, v16);

  std::vector<string> arr_str = pack109::deserialize_vec_string(bytes16);
  test("Test 30 - a8 string de", arr_str, item14);

  // Test Maps

  // m8
  struct Person ann = {10, 3.4, "Ann"}; //u8 age, f32 height, string name
  vec v17{0xAE, 0x01, 
          0xAA, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6F, 0x6E, //"Person"
          0xae, 0x03, //3 pairs
          0xAA, 0x03, 0x61, 0x67, 0x65, //"age"
          0xA2, 0x0A, //10
          0xAA, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, //"height"
          0xA8, 0x40, 0x59, 0x99, 0x9A, //3.4 in hex is 0x4059999a
          0xAA, 0x04, 0x6E, 0x61, 0x6D, 0x65, //"name"
          0xAA, 0x03, 0x41, 0x6E, 0x6E};  //"Ann"
  vec bytes17 = pack109::serialize(ann);
  testvec("Test 31 - m8 Person ser", bytes16, v16);

  struct Person m8_person = pack109::deserialize_person(bytes17);
  testPerson("Test 32 - m8 Person de", m8_person, ann);

  return 0;
}